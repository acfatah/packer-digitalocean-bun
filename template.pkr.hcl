# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "application_name" {
  type    = string
  default = "Bun.sh"
}

variable "apt_packages" {
  type    = string
  default = "nginx"
}

variable "region" {
  type    = string
  default = "sgp1"
}

# All locals variables are generated from variables that uses expressions
# that are not allowed in HCL2 variables.
# Read the documentation for locals blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/locals
locals {
  image_name = "bun-ubuntu-24-04-snapshot-${formatdate("YYYYMMDDhhmmZ",timestamp())}"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# https://developer.hashicorp.com/packer/integrations/digitalocean/digitalocean/latest/components/builder/digitalocean
source "digitalocean" "bun-ubuntu-24-04-snapshot" {
  # api_token should specified via environment variable DIGITALOCEAN_TOKEN or DIGITALOCEAN_ACCESS_TOKEN
  image         = "ubuntu-24-04-x64"
  region        = "${var.region}"
  size          = "s-1vcpu-512mb-10gb"
  snapshot_name = "${local.image_name}"
  ssh_username  = "root"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = [
    "source.digitalocean.bun-ubuntu-24-04-snapshot"
  ]

  provisioner "shell" {
    inline = ["cloud-init status --wait"]
  }

  provisioner "file" {
    destination = "/var/"
    source      = "common/files/var/"
  }

  provisioner "file" {
    destination = "/etc/"
    source      = "files/etc/"
  }

  provisioner "file" {
    destination = "/var/"
    source      = "files/var/"
  }

  provisioner "file" {
    destination = "/root/"
    source      = "files/root/"
  }

  provisioner "shell" {
    environment_vars = [
      "DEBIAN_FRONTEND=noninteractive",
      "LC_ALL=C",
      "LANG=en_US.UTF-8",
      "LC_CTYPE=en_US.UTF-8"
    ]
    inline = [
      "apt -qqy update",
      "apt -qqy -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' full-upgrade",
      "apt -qqy -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install ${var.apt_packages}",
      "apt-get -qqy clean"
    ]
  }

  provisioner "shell" {
    environment_vars = [
      "application_name=${var.application_name}",
      "application_version=$(bun --version)",
      "DEBIAN_FRONTEND=noninteractive",
      "LC_ALL=C",
      "LANG=en_US.UTF-8",
      "LC_CTYPE=en_US.UTF-8"
    ]
    scripts = [
      "scripts/010-bun.sh",
      "common/scripts/014-ufw-nginx.sh",
      "common/scripts/018-force-ssh-logout.sh",
      "common/scripts/020-application-tag.sh",
      "common/scripts/900-cleanup.sh"
    ]
  }

}
